version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: startstack-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-startstack}
      POSTGRES_USER: ${POSTGRES_USER:-startstack_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-startstack_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - startstack-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-startstack_user} -d ${POSTGRES_DB:-startstack}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: startstack-app-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL_DEVELOPMENT=${DATABASE_URL_DEVELOPMENT}
      - DATABASE_URL_PRODUCTION=${DATABASE_URL_PRODUCTION}
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - DODO_API_KEY=${DODO_API_KEY}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - NEXT_PUBLIC_CACHE_ENCRYPTION_KEY=${NEXT_PUBLIC_CACHE_ENCRYPTION_KEY}
      - NEXT_PUBLIC_POSTHOG_API_KEY=${NEXT_PUBLIC_POSTHOG_API_KEY}
      - NEXT_PUBLIC_POSTHOG_HOST=${NEXT_PUBLIC_POSTHOG_HOST}
    networks:
      - startstack-network
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local

networks:
  startstack-network:
    driver: bridge 