{"version":3,"sources":["turbopack:///[project]/docs-fuma/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport type { IncomingMessage, ServerResponse } from 'node:http'\n\nimport {\n  AppPageRouteModule,\n  type AppPageRouteHandlerContext,\n} from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\n\nimport { RouteKind } from '../../server/route-kind' with { 'turbopack-transition': 'next-server-utility' }\n\nimport { getRevalidateReason } from '../../server/instrumentation/utils'\nimport { getTracer, SpanKind, type Span } from '../../server/lib/trace/tracer'\nimport { getRequestMeta } from '../../server/request-meta'\nimport { BaseServerSpan } from '../../server/lib/trace/constants'\nimport { interopDefault } from '../../server/app-render/interop-default'\nimport { NodeNextRequest, NodeNextResponse } from '../../server/base-http/node'\nimport { checkIsAppPPREnabled } from '../../server/lib/experimental/ppr'\nimport {\n  getFallbackRouteParams,\n  type FallbackRouteParams,\n} from '../../server/request/fallback-params'\nimport { setReferenceManifestsSingleton } from '../../server/app-render/encryption-utils'\nimport {\n  isHtmlBotRequest,\n  shouldServeStreamingMetadata,\n} from '../../server/lib/streaming-metadata'\nimport { createServerModuleMap } from '../../server/app-render/action-utils'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport { getIsPossibleServerAction } from '../../server/lib/server-action-request-meta'\nimport {\n  RSC_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_IS_PRERENDER_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n} from '../../client/components/app-router-headers'\nimport { getBotType, isBot } from '../../shared/lib/router/utils/is-bot'\nimport {\n  CachedRouteKind,\n  type CachedAppPageValue,\n  type CachedPageValue,\n  type ResponseCacheEntry,\n  type ResponseGenerator,\n} from '../../server/response-cache'\nimport { decodePathParams } from '../../server/lib/router-utils/decode-path-params'\nimport { FallbackMode, parseFallbackField } from '../../lib/fallback'\nimport RenderResult from '../../server/render-result'\nimport { CACHE_ONE_YEAR, NEXT_CACHE_TAGS_HEADER } from '../../lib/constants'\nimport type { CacheControl } from '../../server/lib/cache-control'\nimport { ENCODED_TAGS } from '../../server/stream-utils/encoded-tags'\nimport { sendRenderResult } from '../../server/send-payload'\nimport { NoFallbackError } from '../../shared/lib/no-fallback-error.external'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nimport GlobalError from 'VAR_MODULE_GLOBAL_ERROR' with { 'turbopack-transition': 'next-server-utility' }\n\nexport { GlobalError }\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: (id: string | number) => unknown\ndeclare const __next_app_load_chunk__: (id: string | number) => Promise<unknown>\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nimport * as entryBase from '../../server/app-render/entry-base' with { 'turbopack-transition': 'next-server-utility' }\nimport { RedirectStatusCode } from '../../client/components/redirect-status-code'\n\nexport * from '../../server/app-render/entry-base' with { 'turbopack-transition': 'next-server-utility' }\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n  distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n  projectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n})\n\nexport async function handler(\n  req: IncomingMessage,\n  res: ServerResponse,\n  ctx: {\n    waitUntil: (prom: Promise<void>) => void\n  }\n) {\n  let srcPage = 'VAR_DEFINITION_PAGE'\n\n  // turbopack doesn't normalize `/index` in the page name\n  // so we need to to process dynamic routes properly\n  // TODO: fix turbopack providing differing value from webpack\n  if (process.env.TURBOPACK) {\n    srcPage = srcPage.replace(/\\/index$/, '') || '/'\n  } else if (srcPage === '/index') {\n    // we always normalize /index specifically\n    srcPage = '/'\n  }\n  const multiZoneDraftMode = process.env\n    .__NEXT_MULTI_ZONE_DRAFT_MODE as any as boolean\n\n  const initialPostponed = getRequestMeta(req, 'postponed')\n  // TODO: replace with more specific flags\n  const minimalMode = getRequestMeta(req, 'minimalMode')\n\n  const prepareResult = await routeModule.prepare(req, res, {\n    srcPage,\n    multiZoneDraftMode,\n  })\n\n  if (!prepareResult) {\n    res.statusCode = 400\n    res.end('Bad Request')\n    ctx.waitUntil?.(Promise.resolve())\n    return null\n  }\n\n  const {\n    buildId,\n    query,\n    params,\n    parsedUrl,\n    pageIsDynamic,\n    buildManifest,\n    nextFontManifest,\n    reactLoadableManifest,\n    serverActionsManifest,\n    clientReferenceManifest,\n    subresourceIntegrityManifest,\n    prerenderManifest,\n    isDraftMode,\n\n    revalidateOnlyGenerated,\n    routerServerContext,\n    nextConfig,\n  } = prepareResult\n\n  const pathname = parsedUrl.pathname || '/'\n  const normalizedSrcPage = normalizeAppPath(srcPage)\n\n  let { isOnDemandRevalidate } = prepareResult\n\n  // TODO: rework this to not be necessary as a middleware\n  // rewrite should not need to pass this context like this\n  // maybe we rely on rewrite header instead\n  let resolvedPathname = getRequestMeta(req, 'rewroteURL') || pathname\n\n  if (resolvedPathname === '/index') {\n    resolvedPathname = '/'\n  }\n  resolvedPathname = decodePathParams(resolvedPathname)\n\n  const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage]\n  const isPrerendered = prerenderManifest.routes[resolvedPathname]\n\n  let isSSG = Boolean(\n    prerenderInfo ||\n      isPrerendered ||\n      prerenderManifest.routes[normalizedSrcPage]\n  )\n\n  // if the page is dynamicParams: false and this pathname wasn't prerender\n  // trigger the no fallback handling\n  if (isSSG && prerenderInfo?.fallback === false && !isPrerendered) {\n    throw new NoFallbackError()\n  }\n\n  const userAgent = req.headers['user-agent'] || ''\n  const botType = getBotType(userAgent)\n  const isHtmlBot = isHtmlBotRequest(req)\n\n  /**\n   * If true, this indicates that the request being made is for an app\n   * prefetch request.\n   */\n  const isPrefetchRSCRequest =\n    getRequestMeta(req, 'isPrefetchRSCRequest') ??\n    Boolean(req.headers[NEXT_ROUTER_PREFETCH_HEADER])\n\n  // NOTE: Don't delete headers[RSC] yet, it still needs to be used in renderToHTML later\n\n  const isRSCRequest =\n    getRequestMeta(req, 'isRSCRequest') ?? Boolean(req.headers[RSC_HEADER])\n\n  const isPossibleServerAction = getIsPossibleServerAction(req)\n\n  /**\n   * If the route being rendered is an app page, and the ppr feature has been\n   * enabled, then the given route _could_ support PPR.\n   */\n  const couldSupportPPR: boolean = checkIsAppPPREnabled(\n    nextConfig.experimental.ppr\n  )\n\n  // When enabled, this will allow the use of the `?__nextppronly` query to\n  // enable debugging of the static shell.\n  const hasDebugStaticShellQuery =\n    process.env.__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING === '1' &&\n    typeof query.__nextppronly !== 'undefined' &&\n    couldSupportPPR\n\n  // When enabled, this will allow the use of the `?__nextppronly` query\n  // to enable debugging of the fallback shell.\n  const hasDebugFallbackShellQuery =\n    hasDebugStaticShellQuery && query.__nextppronly === 'fallback'\n\n  // This page supports PPR if it is marked as being `PARTIALLY_STATIC` in the\n  // prerender manifest and this is an app page.\n  const isRoutePPREnabled: boolean =\n    couldSupportPPR &&\n    ((\n      prerenderManifest.routes[normalizedSrcPage] ??\n      prerenderManifest.dynamicRoutes[normalizedSrcPage]\n    )?.renderingMode === 'PARTIALLY_STATIC' ||\n      // Ideally we'd want to check the appConfig to see if this page has PPR\n      // enabled or not, but that would require plumbing the appConfig through\n      // to the server during development. We assume that the page supports it\n      // but only during development.\n      (hasDebugStaticShellQuery &&\n        (routeModule.isDev === true ||\n          routerServerContext?.experimentalTestProxy === true)))\n\n  const isDebugStaticShell: boolean =\n    hasDebugStaticShellQuery && isRoutePPREnabled\n\n  // We should enable debugging dynamic accesses when the static shell\n  // debugging has been enabled and we're also in development mode.\n  const isDebugDynamicAccesses =\n    isDebugStaticShell && routeModule.isDev === true\n\n  const isDebugFallbackShell = hasDebugFallbackShellQuery && isRoutePPREnabled\n\n  // If we're in minimal mode, then try to get the postponed information from\n  // the request metadata. If available, use it for resuming the postponed\n  // render.\n  const minimalPostponed = isRoutePPREnabled ? initialPostponed : undefined\n\n  // If PPR is enabled, and this is a RSC request (but not a prefetch), then\n  // we can use this fact to only generate the flight data for the request\n  // because we can't cache the HTML (as it's also dynamic).\n  const isDynamicRSCRequest =\n    isRoutePPREnabled && isRSCRequest && !isPrefetchRSCRequest\n\n  // Need to read this before it's stripped by stripFlightHeaders. We don't\n  // need to transfer it to the request meta because it's only read\n  // within this function; the static segment data should have already been\n  // generated, so we will always either return a static response or a 404.\n  const segmentPrefetchHeader = getRequestMeta(req, 'segmentPrefetchRSCRequest')\n\n  // TODO: investigate existing bug with shouldServeStreamingMetadata always\n  // being true for a revalidate due to modifying the base-server this.renderOpts\n  // when fixing this to correct logic it causes hydration issue since we set\n  // serveStreamingMetadata to true during export\n  let serveStreamingMetadata = !userAgent\n    ? true\n    : shouldServeStreamingMetadata(userAgent, nextConfig.htmlLimitedBots)\n\n  if (isHtmlBot && isRoutePPREnabled) {\n    isSSG = false\n    serveStreamingMetadata = false\n  }\n\n  // In development, we always want to generate dynamic HTML.\n  let supportsDynamicResponse: boolean =\n    // If we're in development, we always support dynamic HTML, unless it's\n    // a data request, in which case we only produce static HTML.\n    routeModule.isDev === true ||\n    // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isSSG ||\n    // If this request has provided postponed data, it supports dynamic\n    // HTML.\n    typeof initialPostponed === 'string' ||\n    // If this is a dynamic RSC request, then this render supports dynamic\n    // HTML (it's dynamic).\n    isDynamicRSCRequest\n\n  // When html bots request PPR page, perform the full dynamic rendering.\n  const shouldWaitOnAllReady = isHtmlBot && isRoutePPREnabled\n\n  let ssgCacheKey: string | null = null\n  if (\n    !isDraftMode &&\n    isSSG &&\n    !supportsDynamicResponse &&\n    !isPossibleServerAction &&\n    !minimalPostponed &&\n    !isDynamicRSCRequest\n  ) {\n    ssgCacheKey = resolvedPathname\n  }\n\n  const ComponentMod = {\n    ...entryBase,\n    tree,\n    pages,\n    GlobalError,\n    handler,\n    routeModule,\n    __next_app__,\n  }\n\n  // Before rendering (which initializes component tree modules), we have to\n  // set the reference manifests to our global store so Server Action's\n  // encryption util can access to them at the top level of the page module.\n  if (serverActionsManifest && clientReferenceManifest) {\n    setReferenceManifestsSingleton({\n      page: srcPage,\n      clientReferenceManifest,\n      serverActionsManifest,\n      serverModuleMap: createServerModuleMap({\n        serverActionsManifest,\n      }),\n    })\n  }\n\n  const method = req.method || 'GET'\n  const tracer = getTracer()\n  const activeSpan = tracer.getActiveScopeSpan()\n\n  try {\n    const invokeRouteModule = async (\n      span: Span | undefined,\n      context: AppPageRouteHandlerContext\n    ) => {\n      const nextReq = new NodeNextRequest(req)\n      const nextRes = new NodeNextResponse(res)\n\n      // TODO: adapt for putting the RDC inside the postponed data\n      // If we're in dev, and this isn't a prefetch or a server action,\n      // we should seed the resume data cache.\n      if (process.env.NODE_ENV === 'development') {\n        if (\n          nextConfig.experimental.dynamicIO &&\n          !isPrefetchRSCRequest &&\n          !context.renderOpts.isPossibleServerAction\n        ) {\n          const warmup = await routeModule.warmup(nextReq, nextRes, context)\n\n          // If the warmup is successful, we should use the resume data\n          // cache from the warmup.\n          if (warmup.metadata.renderResumeDataCache) {\n            context.renderOpts.renderResumeDataCache =\n              warmup.metadata.renderResumeDataCache\n          }\n        }\n      }\n\n      return routeModule.render(nextReq, nextRes, context).finally(() => {\n        if (!span) return\n\n        span.setAttributes({\n          'http.status_code': res.statusCode,\n          'next.rsc': false,\n        })\n\n        const rootSpanAttributes = tracer.getRootSpanAttributes()\n        // We were unable to get attributes, probably OTEL is not enabled\n        if (!rootSpanAttributes) {\n          return\n        }\n\n        if (\n          rootSpanAttributes.get('next.span_type') !==\n          BaseServerSpan.handleRequest\n        ) {\n          console.warn(\n            `Unexpected root span type '${rootSpanAttributes.get(\n              'next.span_type'\n            )}'. Please report this Next.js issue https://github.com/vercel/next.js`\n          )\n          return\n        }\n\n        const route = rootSpanAttributes.get('next.route')\n        if (route) {\n          const name = `${method} ${route}`\n\n          span.setAttributes({\n            'next.route': route,\n            'http.route': route,\n            'next.span_name': name,\n          })\n          span.updateName(name)\n        } else {\n          span.updateName(`${method} ${req.url}`)\n        }\n      })\n    }\n\n    const doRender = async ({\n      span,\n      postponed,\n      fallbackRouteParams,\n    }: {\n      span?: Span\n      /**\n       * The postponed data for this render. This is only provided when resuming\n       * a render that has been postponed.\n       */\n      postponed: string | undefined\n\n      /**\n       * The unknown route params for this render.\n       */\n      fallbackRouteParams: FallbackRouteParams | null\n    }): Promise<ResponseCacheEntry> => {\n      const context: AppPageRouteHandlerContext = {\n        query,\n        params,\n        page: normalizedSrcPage,\n        sharedContext: {\n          buildId,\n        },\n        serverComponentsHmrCache: getRequestMeta(\n          req,\n          'serverComponentsHmrCache'\n        ),\n        fallbackRouteParams,\n        renderOpts: {\n          App: () => null,\n          Document: () => null,\n          pageConfig: {},\n          ComponentMod,\n          Component: interopDefault(ComponentMod),\n\n          params,\n          routeModule,\n          page: srcPage,\n          postponed,\n          shouldWaitOnAllReady,\n          serveStreamingMetadata,\n          supportsDynamicResponse:\n            typeof postponed === 'string' || supportsDynamicResponse,\n          buildManifest,\n          nextFontManifest,\n          reactLoadableManifest,\n          subresourceIntegrityManifest,\n          serverActionsManifest,\n          clientReferenceManifest,\n          setIsrStatus: routerServerContext?.setIsrStatus,\n\n          dir: routeModule.projectDir,\n          isDraftMode,\n          isRevalidate: isSSG && !postponed && !isDynamicRSCRequest,\n          botType,\n          isOnDemandRevalidate,\n          isPossibleServerAction,\n          assetPrefix: nextConfig.assetPrefix,\n          nextConfigOutput: nextConfig.output,\n          crossOrigin: nextConfig.crossOrigin,\n          trailingSlash: nextConfig.trailingSlash,\n          previewProps: prerenderManifest.preview,\n          deploymentId: nextConfig.deploymentId,\n          enableTainting: nextConfig.experimental.taint,\n          htmlLimitedBots: nextConfig.htmlLimitedBots,\n          devtoolSegmentExplorer:\n            nextConfig.experimental.devtoolSegmentExplorer,\n          reactMaxHeadersLength: nextConfig.reactMaxHeadersLength,\n\n          multiZoneDraftMode,\n          incrementalCache: getRequestMeta(req, 'incrementalCache'),\n          cacheLifeProfiles: nextConfig.experimental.cacheLife,\n          basePath: nextConfig.basePath,\n          serverActions: nextConfig.experimental.serverActions,\n\n          ...(isDebugStaticShell || isDebugDynamicAccesses\n            ? {\n                nextExport: true,\n                supportsDynamicResponse: false,\n                isStaticGeneration: true,\n                isRevalidate: true,\n                isDebugDynamicAccesses: isDebugDynamicAccesses,\n              }\n            : {}),\n\n          experimental: {\n            isRoutePPREnabled,\n            expireTime: nextConfig.expireTime,\n            staleTimes: nextConfig.experimental.staleTimes,\n            dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n            clientSegmentCache: Boolean(\n              nextConfig.experimental.clientSegmentCache\n            ),\n            dynamicOnHover: Boolean(nextConfig.experimental.dynamicOnHover),\n            inlineCss: Boolean(nextConfig.experimental.inlineCss),\n            authInterrupts: Boolean(nextConfig.experimental.authInterrupts),\n            clientTraceMetadata:\n              nextConfig.experimental.clientTraceMetadata || ([] as any),\n          },\n\n          waitUntil: ctx.waitUntil,\n          onClose: (cb) => {\n            res.on('close', cb)\n          },\n          onAfterTaskError: () => {},\n\n          onInstrumentationRequestError: (error, _request, errorContext) =>\n            routeModule.onRequestError(\n              req,\n              error,\n              errorContext,\n              routerServerContext\n            ),\n          err: getRequestMeta(req, 'invokeError'),\n          dev: routeModule.isDev,\n        },\n      }\n\n      const result = await invokeRouteModule(span, context)\n\n      const { metadata } = result\n\n      const {\n        cacheControl,\n        headers = {},\n        // Add any fetch tags that were on the page to the response headers.\n        fetchTags: cacheTags,\n      } = metadata\n\n      if (cacheTags) {\n        headers[NEXT_CACHE_TAGS_HEADER] = cacheTags\n      }\n\n      // Pull any fetch metrics from the render onto the request.\n      ;(req as any).fetchMetrics = metadata.fetchMetrics\n\n      // we don't throw static to dynamic errors in dev as isSSG\n      // is a best guess in dev since we don't have the prerender pass\n      // to know whether the path is actually static or not\n      if (\n        isSSG &&\n        cacheControl?.revalidate === 0 &&\n        !routeModule.isDev &&\n        !isRoutePPREnabled\n      ) {\n        const staticBailoutInfo = metadata.staticBailoutInfo\n\n        const err = new Error(\n          `Page changed from static to dynamic at runtime ${resolvedPathname}${\n            staticBailoutInfo?.description\n              ? `, reason: ${staticBailoutInfo.description}`\n              : ``\n          }` +\n            `\\nsee more here https://nextjs.org/docs/messages/app-static-to-dynamic-error`\n        )\n\n        if (staticBailoutInfo?.stack) {\n          const stack = staticBailoutInfo.stack\n          err.stack = err.message + stack.substring(stack.indexOf('\\n'))\n        }\n\n        throw err\n      }\n\n      return {\n        value: {\n          kind: CachedRouteKind.APP_PAGE,\n          html: result,\n          headers,\n          rscData: metadata.flightData,\n          postponed: metadata.postponed,\n          status: metadata.statusCode,\n          segmentData: metadata.segmentData,\n        } satisfies CachedAppPageValue,\n        cacheControl,\n      } satisfies ResponseCacheEntry\n    }\n\n    const responseGenerator: ResponseGenerator = async ({\n      hasResolved,\n      previousCacheEntry,\n      isRevalidating,\n      span,\n    }) => {\n      const isProduction = routeModule.isDev === false\n      const didRespond = hasResolved || res.writableEnded\n\n      // skip on-demand revalidate if cache is not present and\n      // revalidate-if-generated is set\n      if (\n        isOnDemandRevalidate &&\n        revalidateOnlyGenerated &&\n        !previousCacheEntry &&\n        !minimalMode\n      ) {\n        if (routerServerContext?.render404) {\n          await routerServerContext.render404(req, res)\n        } else {\n          res.statusCode = 404\n          res.end('This page could not be found')\n        }\n        return null\n      }\n\n      let fallbackMode: FallbackMode | undefined\n\n      if (prerenderInfo) {\n        fallbackMode = parseFallbackField(prerenderInfo.fallback)\n      }\n\n      // When serving a bot request, we want to serve a blocking render and not\n      // the prerendered page. This ensures that the correct content is served\n      // to the bot in the head.\n      if (fallbackMode === FallbackMode.PRERENDER && isBot(userAgent)) {\n        fallbackMode = FallbackMode.BLOCKING_STATIC_RENDER\n      }\n\n      if (previousCacheEntry?.isStale === -1) {\n        isOnDemandRevalidate = true\n      }\n\n      // TODO: adapt for PPR\n      // only allow on-demand revalidate for fallback: true/blocking\n      // or for prerendered fallback: false paths\n      if (\n        isOnDemandRevalidate &&\n        (fallbackMode !== FallbackMode.NOT_FOUND || previousCacheEntry)\n      ) {\n        fallbackMode = FallbackMode.BLOCKING_STATIC_RENDER\n      }\n\n      if (\n        !minimalMode &&\n        fallbackMode !== FallbackMode.BLOCKING_STATIC_RENDER &&\n        ssgCacheKey &&\n        !didRespond &&\n        !isDraftMode &&\n        pageIsDynamic &&\n        (isProduction || !isPrerendered)\n      ) {\n        let fallbackResponse: ResponseCacheEntry | null | undefined\n\n        if (isRoutePPREnabled && !isRSCRequest) {\n          // We use the response cache here to handle the revalidation and\n          // management of the fallback shell.\n          fallbackResponse = await routeModule.handleResponse({\n            cacheKey: isProduction ? normalizedSrcPage : null,\n            req,\n            nextConfig,\n            routeKind: RouteKind.APP_PAGE,\n            isFallback: true,\n            prerenderManifest,\n            isRoutePPREnabled,\n            responseGenerator: async () =>\n              doRender({\n                span,\n                // We pass `undefined` as rendering a fallback isn't resumed\n                // here.\n                postponed: undefined,\n                fallbackRouteParams:\n                  // If we're in production or we're debugging the fallback\n                  // shell then we should postpone when dynamic params are\n                  // accessed.\n                  isProduction || isDebugFallbackShell\n                    ? getFallbackRouteParams(normalizedSrcPage)\n                    : null,\n              }),\n            waitUntil: ctx.waitUntil,\n          })\n\n          // If the fallback response was set to null, then we should return null.\n          if (fallbackResponse === null) return null\n\n          // Otherwise, if we did get a fallback response, we should return it.\n          if (fallbackResponse) {\n            // Remove the cache control from the response to prevent it from being\n            // used in the surrounding cache.\n            delete fallbackResponse.cacheControl\n\n            return fallbackResponse\n          }\n        }\n      }\n      // Only requests that aren't revalidating can be resumed. If we have the\n      // minimal postponed data, then we should resume the render with it.\n      const postponed =\n        !isOnDemandRevalidate && !isRevalidating && minimalPostponed\n          ? minimalPostponed\n          : undefined\n\n      // When we're in minimal mode, if we're trying to debug the static shell,\n      // we should just return nothing instead of resuming the dynamic render.\n      if (\n        (isDebugStaticShell || isDebugDynamicAccesses) &&\n        typeof postponed !== 'undefined'\n      ) {\n        return {\n          cacheControl: { revalidate: 1, expire: undefined },\n          value: {\n            kind: CachedRouteKind.PAGES,\n            html: RenderResult.fromStatic(''),\n            pageData: {},\n            headers: undefined,\n            status: undefined,\n          } satisfies CachedPageValue,\n        }\n      }\n\n      // If this is a dynamic route with PPR enabled and the default route\n      // matches were set, then we should pass the fallback route params to\n      // the renderer as this is a fallback revalidation request.\n      const fallbackRouteParams =\n        pageIsDynamic &&\n        isRoutePPREnabled &&\n        (getRequestMeta(req, 'renderFallbackShell') || isDebugFallbackShell)\n          ? getFallbackRouteParams(pathname)\n          : null\n\n      // Perform the render.\n      return doRender({\n        span,\n        postponed,\n        fallbackRouteParams,\n      })\n    }\n\n    const handleResponse = async (span?: Span): Promise<null | void> => {\n      const cacheEntry = await routeModule.handleResponse({\n        cacheKey: ssgCacheKey,\n        responseGenerator: (c) =>\n          responseGenerator({\n            span,\n            ...c,\n          }),\n        routeKind: RouteKind.APP_PAGE,\n        isOnDemandRevalidate,\n        isRoutePPREnabled,\n        req,\n        nextConfig,\n        prerenderManifest,\n        waitUntil: ctx.waitUntil,\n      })\n\n      if (isDraftMode) {\n        res.setHeader(\n          'Cache-Control',\n          'private, no-cache, no-store, max-age=0, must-revalidate'\n        )\n      }\n\n      // In dev, we should not cache pages for any reason.\n      if (routeModule.isDev) {\n        res.setHeader('Cache-Control', 'no-store, must-revalidate')\n      }\n\n      if (!cacheEntry) {\n        if (ssgCacheKey) {\n          // A cache entry might not be generated if a response is written\n          // in `getInitialProps` or `getServerSideProps`, but those shouldn't\n          // have a cache key. If we do have a cache key but we don't end up\n          // with a cache entry, then either Next.js or the application has a\n          // bug that needs fixing.\n          throw new Error('invariant: cache entry required but not generated')\n        }\n        return null\n      }\n\n      if (cacheEntry.value?.kind !== CachedRouteKind.APP_PAGE) {\n        throw new Error(\n          `Invariant app-page handler received invalid cache entry ${cacheEntry.value?.kind}`\n        )\n      }\n\n      const didPostpone = typeof cacheEntry.value.postponed === 'string'\n\n      if (\n        isSSG &&\n        // We don't want to send a cache header for requests that contain dynamic\n        // data. If this is a Dynamic RSC request or wasn't a Prefetch RSC\n        // request, then we should set the cache header.\n        !isDynamicRSCRequest &&\n        (!didPostpone || isPrefetchRSCRequest)\n      ) {\n        if (!minimalMode) {\n          // set x-nextjs-cache header to match the header\n          // we set for the image-optimizer\n          res.setHeader(\n            'x-nextjs-cache',\n            isOnDemandRevalidate\n              ? 'REVALIDATED'\n              : cacheEntry.isMiss\n                ? 'MISS'\n                : cacheEntry.isStale\n                  ? 'STALE'\n                  : 'HIT'\n          )\n        }\n        // Set a header used by the client router to signal the response is static\n        // and should respect the `static` cache staleTime value.\n        res.setHeader(NEXT_IS_PRERENDER_HEADER, '1')\n      }\n      const { value: cachedData } = cacheEntry\n\n      // Coerce the cache control parameter from the render.\n      let cacheControl: CacheControl | undefined\n\n      // If this is a resume request in minimal mode it is streamed with dynamic\n      // content and should not be cached.\n      if (minimalPostponed) {\n        cacheControl = { revalidate: 0, expire: undefined }\n      }\n\n      // If this is in minimal mode and this is a flight request that isn't a\n      // prefetch request while PPR is enabled, it cannot be cached as it contains\n      // dynamic content.\n      else if (\n        minimalMode &&\n        isRSCRequest &&\n        !isPrefetchRSCRequest &&\n        isRoutePPREnabled\n      ) {\n        cacheControl = { revalidate: 0, expire: undefined }\n      } else if (!routeModule.isDev) {\n        // If this is a preview mode request, we shouldn't cache it\n        if (isDraftMode) {\n          cacheControl = { revalidate: 0, expire: undefined }\n        }\n\n        // If this isn't SSG, then we should set change the header only if it is\n        // not set already.\n        else if (!isSSG) {\n          if (!res.getHeader('Cache-Control')) {\n            cacheControl = { revalidate: 0, expire: undefined }\n          }\n        } else if (cacheEntry.cacheControl) {\n          // If the cache entry has a cache control with a revalidate value that's\n          // a number, use it.\n          if (typeof cacheEntry.cacheControl.revalidate === 'number') {\n            if (cacheEntry.cacheControl.revalidate < 1) {\n              throw new Error(\n                `Invalid revalidate configuration provided: ${cacheEntry.cacheControl.revalidate} < 1`\n              )\n            }\n\n            cacheControl = {\n              revalidate: cacheEntry.cacheControl.revalidate,\n              expire: cacheEntry.cacheControl?.expire ?? nextConfig.expireTime,\n            }\n          }\n          // Otherwise if the revalidate value is false, then we should use the\n          // cache time of one year.\n          else {\n            cacheControl = { revalidate: CACHE_ONE_YEAR, expire: undefined }\n          }\n        }\n      }\n\n      cacheEntry.cacheControl = cacheControl\n\n      if (\n        typeof segmentPrefetchHeader === 'string' &&\n        cachedData?.kind === CachedRouteKind.APP_PAGE &&\n        cachedData.segmentData\n      ) {\n        // This is a prefetch request issued by the client Segment Cache. These\n        // should never reach the application layer (lambda). We should either\n        // respond from the cache (HIT) or respond with 204 No Content (MISS).\n\n        // Set a header to indicate that PPR is enabled for this route. This\n        // lets the client distinguish between a regular cache miss and a cache\n        // miss due to PPR being disabled. In other contexts this header is used\n        // to indicate that the response contains dynamic data, but here we're\n        // only using it to indicate that the feature is enabled — the segment\n        // response itself contains whether the data is dynamic.\n        res.setHeader(NEXT_DID_POSTPONE_HEADER, '2')\n\n        // Add the cache tags header to the response if it exists and we're in\n        // minimal mode while rendering a static page.\n        const tags = cachedData.headers?.[NEXT_CACHE_TAGS_HEADER]\n        if (minimalMode && isSSG && tags && typeof tags === 'string') {\n          res.setHeader(NEXT_CACHE_TAGS_HEADER, tags)\n        }\n\n        const matchedSegment = cachedData.segmentData.get(segmentPrefetchHeader)\n        if (matchedSegment !== undefined) {\n          // Cache hit\n          return sendRenderResult({\n            req,\n            res,\n            type: 'rsc',\n            generateEtags: nextConfig.generateEtags,\n            poweredByHeader: nextConfig.poweredByHeader,\n            result: RenderResult.fromStatic(matchedSegment),\n            cacheControl: cacheEntry.cacheControl,\n          })\n        }\n\n        // Cache miss. Either a cache entry for this route has not been generated\n        // (which technically should not be possible when PPR is enabled, because\n        // at a minimum there should always be a fallback entry) or there's no\n        // match for the requested segment. Respond with a 204 No Content. We\n        // don't bother to respond with 404, because these requests are only\n        // issued as part of a prefetch.\n        res.statusCode = 204\n        return sendRenderResult({\n          req,\n          res,\n          type: 'rsc',\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: RenderResult.fromStatic(''),\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // If there's a callback for `onCacheEntry`, call it with the cache entry\n      // and the revalidate options.\n      const onCacheEntry = getRequestMeta(req, 'onCacheEntry')\n      if (onCacheEntry) {\n        const finished = await onCacheEntry(\n          {\n            ...cacheEntry,\n            // TODO: remove this when upstream doesn't\n            // always expect this value to be \"PAGE\"\n            value: {\n              ...cacheEntry.value,\n              kind: 'PAGE',\n            },\n          },\n          {\n            url: getRequestMeta(req, 'initURL'),\n          }\n        )\n        if (finished) {\n          // TODO: maybe we have to end the request?\n          return null\n        }\n      }\n\n      // If the request has a postponed state and it's a resume request we\n      // should error.\n      if (didPostpone && minimalPostponed) {\n        throw new Error(\n          'Invariant: postponed state should not be present on a resume request'\n        )\n      }\n\n      if (cachedData.headers) {\n        const headers = { ...cachedData.headers }\n\n        if (!minimalMode || !isSSG) {\n          delete headers[NEXT_CACHE_TAGS_HEADER]\n        }\n\n        for (let [key, value] of Object.entries(headers)) {\n          if (typeof value === 'undefined') continue\n\n          if (Array.isArray(value)) {\n            for (const v of value) {\n              res.appendHeader(key, v)\n            }\n          } else if (typeof value === 'number') {\n            value = value.toString()\n            res.appendHeader(key, value)\n          } else {\n            res.appendHeader(key, value)\n          }\n        }\n      }\n\n      // Add the cache tags header to the response if it exists and we're in\n      // minimal mode while rendering a static page.\n      const tags = cachedData.headers?.[NEXT_CACHE_TAGS_HEADER]\n      if (minimalMode && isSSG && tags && typeof tags === 'string') {\n        res.setHeader(NEXT_CACHE_TAGS_HEADER, tags)\n      }\n\n      // If the request is a data request, then we shouldn't set the status code\n      // from the response because it should always be 200. This should be gated\n      // behind the experimental PPR flag.\n      if (cachedData.status && (!isRSCRequest || !isRoutePPREnabled)) {\n        res.statusCode = cachedData.status\n      }\n\n      // Redirect information is encoded in RSC payload, so we don't need to use redirect status codes\n      if (\n        !minimalMode &&\n        cachedData.status &&\n        RedirectStatusCode[cachedData.status] &&\n        isRSCRequest\n      ) {\n        res.statusCode = 200\n      }\n\n      // Mark that the request did postpone.\n      if (didPostpone) {\n        res.setHeader(NEXT_DID_POSTPONE_HEADER, '1')\n      }\n\n      // we don't go through this block when preview mode is true\n      // as preview mode is a dynamic request (bypasses cache) and doesn't\n      // generate both HTML and payloads in the same request so continue to just\n      // return the generated payload\n      if (isRSCRequest && !isDraftMode) {\n        // If this is a dynamic RSC request, then stream the response.\n        if (typeof cachedData.rscData === 'undefined') {\n          if (cachedData.postponed) {\n            throw new Error('Invariant: Expected postponed to be undefined')\n          }\n\n          return sendRenderResult({\n            req,\n            res,\n            type: 'rsc',\n            generateEtags: nextConfig.generateEtags,\n            poweredByHeader: nextConfig.poweredByHeader,\n            result: cachedData.html,\n            // Dynamic RSC responses cannot be cached, even if they're\n            // configured with `force-static` because we have no way of\n            // distinguishing between `force-static` and pages that have no\n            // postponed state.\n            // TODO: distinguish `force-static` from pages with no postponed state (static)\n            cacheControl: isDynamicRSCRequest\n              ? { revalidate: 0, expire: undefined }\n              : cacheEntry.cacheControl,\n          })\n        }\n\n        // As this isn't a prefetch request, we should serve the static flight\n        // data.\n        return sendRenderResult({\n          req,\n          res,\n          type: 'rsc',\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: RenderResult.fromStatic(cachedData.rscData),\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // This is a request for HTML data.\n      let body = cachedData.html\n\n      // If there's no postponed state, we should just serve the HTML. This\n      // should also be the case for a resume request because it's completed\n      // as a server render (rather than a static render).\n      if (!didPostpone || minimalMode) {\n        return sendRenderResult({\n          req,\n          res,\n          type: 'html',\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: body,\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // If we're debugging the static shell or the dynamic API accesses, we\n      // should just serve the HTML without resuming the render. The returned\n      // HTML will be the static shell so all the Dynamic API's will be used\n      // during static generation.\n      if (isDebugStaticShell || isDebugDynamicAccesses) {\n        // Since we're not resuming the render, we need to at least add the\n        // closing body and html tags to create valid HTML.\n        body.chain(\n          new ReadableStream({\n            start(controller) {\n              controller.enqueue(ENCODED_TAGS.CLOSED.BODY_AND_HTML)\n              controller.close()\n            },\n          })\n        )\n\n        return sendRenderResult({\n          req,\n          res,\n          type: 'html',\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: body,\n          cacheControl: { revalidate: 0, expire: undefined },\n        })\n      }\n\n      // This request has postponed, so let's create a new transformer that the\n      // dynamic data can pipe to that will attach the dynamic data to the end\n      // of the response.\n      const transformer = new TransformStream<Uint8Array, Uint8Array>()\n      body.chain(transformer.readable)\n\n      // Perform the render again, but this time, provide the postponed state.\n      // We don't await because we want the result to start streaming now, and\n      // we've already chained the transformer's readable to the render result.\n      doRender({\n        span,\n        postponed: cachedData.postponed,\n        // This is a resume render, not a fallback render, so we don't need to\n        // set this.\n        fallbackRouteParams: null,\n      })\n        .then(async (result) => {\n          if (!result) {\n            throw new Error('Invariant: expected a result to be returned')\n          }\n\n          if (result.value?.kind !== CachedRouteKind.APP_PAGE) {\n            throw new Error(\n              `Invariant: expected a page response, got ${result.value?.kind}`\n            )\n          }\n\n          // Pipe the resume result to the transformer.\n          await result.value.html.pipeTo(transformer.writable)\n        })\n        .catch((err) => {\n          // An error occurred during piping or preparing the render, abort\n          // the transformers writer so we can terminate the stream.\n          transformer.writable.abort(err).catch((e) => {\n            console.error(\"couldn't abort transformer\", e)\n          })\n        })\n\n      return sendRenderResult({\n        req,\n        res,\n        type: 'html',\n        generateEtags: nextConfig.generateEtags,\n        poweredByHeader: nextConfig.poweredByHeader,\n        result: body,\n        // We don't want to cache the response if it has postponed data because\n        // the response being sent to the client it's dynamic parts are streamed\n        // to the client on the same request.\n        cacheControl: { revalidate: 0, expire: undefined },\n      })\n    }\n\n    // TODO: activeSpan code path is for when wrapped by\n    // next-server can be removed when this is no longer used\n    if (activeSpan) {\n      await handleResponse(activeSpan)\n    } else {\n      return await tracer.withPropagatedContext(req.headers, () =>\n        tracer.trace(\n          BaseServerSpan.handleRequest,\n          {\n            spanName: `${method} ${req.url}`,\n            kind: SpanKind.SERVER,\n            attributes: {\n              'http.method': method,\n              'http.target': req.url,\n            },\n          },\n          handleResponse\n        )\n      )\n    }\n  } catch (err) {\n    // if we aren't wrapped by base-server handle here\n    if (!activeSpan) {\n      await routeModule.onRequestError(\n        req,\n        err,\n        {\n          routerKind: 'App Router',\n          routePath: srcPage,\n          routeType: 'render',\n          revalidateReason: getRevalidateReason({\n            isRevalidate: isSSG,\n            isOnDemandRevalidate,\n          }),\n        },\n        routerServerContext\n      )\n    }\n\n    // rethrow so that we can handle serving error page\n    throw err\n  }\n}\n"],"names":["AppPageRouteModule","RouteKind","getRevalidateReason","getTracer","SpanKind","getRequestMeta","BaseServerSpan","interopDefault","NodeNextRequest","NodeNextResponse","checkIsAppPPREnabled","getFallbackRouteParams","setReferenceManifestsSingleton","isHtmlBotRequest","shouldServeStreamingMetadata","createServerModuleMap","normalizeAppPath","getIsPossibleServerAction","RSC_HEADER","NEXT_ROUTER_PREFETCH_HEADER","NEXT_IS_PRERENDER_HEADER","NEXT_DID_POSTPONE_HEADER","getBotType","isBot","CachedRouteKind","decodePathParams","FallbackMode","parseFallbackField","RenderResult","CACHE_ONE_YEAR","NEXT_CACHE_TAGS_HEADER","ENCODED_TAGS","sendRenderResult","NoFallbackError","tree","pages","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","entryBase","RedirectStatusCode","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree","distDir","process","env","__NEXT_RELATIVE_DIST_DIR","projectDir","__NEXT_RELATIVE_PROJECT_DIR","handler","req","res","ctx","prerenderManifest","srcPage","TURBOPACK","replace","multiZoneDraftMode","__NEXT_MULTI_ZONE_DRAFT_MODE","initialPostponed","minimalMode","prepareResult","prepare","statusCode","end","waitUntil","Promise","resolve","buildId","query","params","parsedUrl","pageIsDynamic","buildManifest","nextFontManifest","reactLoadableManifest","serverActionsManifest","clientReferenceManifest","subresourceIntegrityManifest","isDraftMode","revalidateOnlyGenerated","routerServerContext","nextConfig","normalizedSrcPage","isOnDemandRevalidate","resolvedPathname","prerenderInfo","dynamicRoutes","isPrerendered","routes","isSSG","Boolean","fallback","userAgent","headers","botType","isHtmlBot","isPrefetchRSCRequest","isRSCRequest","isPossibleServerAction","couldSupportPPR","experimental","ppr","hasDebugStaticShellQuery","__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING","__nextppronly","hasDebugFallbackShellQuery","isRoutePPREnabled","renderingMode","isDev","experimentalTestProxy","isDebugStaticShell","isDebugDynamicAccesses","isDebugFallbackShell","minimalPostponed","undefined","isDynamicRSCRequest","segmentPrefetchHeader","serveStreamingMetadata","htmlLimitedBots","supportsDynamicResponse","shouldWaitOnAllReady","ssgCacheKey","ComponentMod","serverModuleMap","method","tracer","activeSpan","getActiveScopeSpan","invokeRouteModule","span","context","nextReq","nextRes","NODE_ENV","dynamicIO","renderOpts","warmup","metadata","renderResumeDataCache","render","finally","setAttributes","rootSpanAttributes","getRootSpanAttributes","get","handleRequest","console","warn","route","name","updateName","url","doRender","postponed","fallbackRouteParams","sharedContext","serverComponentsHmrCache","App","Document","pageConfig","Component","setIsrStatus","dir","isRevalidate","assetPrefix","nextConfigOutput","output","crossOrigin","trailingSlash","previewProps","preview","deploymentId","enableTainting","taint","devtoolSegmentExplorer","reactMaxHeadersLength","incrementalCache","cacheLifeProfiles","cacheLife","basePath","serverActions","nextExport","isStaticGeneration","expireTime","staleTimes","clientSegmentCache","dynamicOnHover","inlineCss","authInterrupts","clientTraceMetadata","onClose","cb","on","onAfterTaskError","onInstrumentationRequestError","error","_request","errorContext","onRequestError","err","dev","result","cacheControl","fetchTags","cacheTags","fetchMetrics","revalidate","staticBailoutInfo","Error","description","stack","message","substring","indexOf","value","html","rscData","flightData","status","segmentData","responseGenerator","hasResolved","previousCacheEntry","isRevalidating","isProduction","didRespond","writableEnded","render404","fallbackMode","PRERENDER","BLOCKING_STATIC_RENDER","isStale","NOT_FOUND","fallbackResponse","handleResponse","cacheKey","routeKind","isFallback","expire","PAGES","fromStatic","pageData","cacheEntry","cachedData","c","setHeader","didPostpone","isMiss","getHeader","tags","matchedSegment","type","generateEtags","poweredByHeader","onCacheEntry","finished","key","Object","entries","Array","isArray","v","appendHeader","toString","body","chain","ReadableStream","start","controller","enqueue","CLOSED","BODY_AND_HTML","close","transformer","TransformStream","readable","then","pipeTo","writable","catch","abort","e","withPropagatedContext","trace","spanName","SERVER","attributes","routerKind","routePath","routeType","revalidateReason"],"mappings":"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","ignoreList":[0]}